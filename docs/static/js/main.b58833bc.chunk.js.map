{"version":3,"sources":["services/storageService.js","services/weatherService.js","store/actions/weatherActions.js","cmps/AppHeader.jsx","cmps/FavoritePreview.jsx","cmps/FavoriteList.jsx","pages/Favorites.jsx","cmps/DayPreview.jsx","cmps/FiveDaysList.jsx","pages/Homepage.jsx","cmps/AppFooter.jsx","App.jsx","reportWebVitals.js","store/reducers/weatherReducer.js","store/index.js","index.js"],"names":["storageService","saveToStorage","key","val","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","weatherService","getWeatherNow","name","getCityCode","then","cities","length","Key","res","url","axios","get","data","fiveDayForecast","city","getCityCodeByPos","lat","lang","queryName","EnglishName","loadCity","dispatch","a","currCity","currCityWeather","type","swal","button","setFiveDayForecast","forecast","AppHeader","useSelector","state","weatherModule","isCelsius","isDarkMode","useDispatch","className","exact","to","onClick","FavoritePreview","setCity","useState","bgImage","setBgImage","useEffect","cityWeather","IconPhrase","location","Temperature","style","backgroundImage","LocalizedName","temp","Value","Math","round","cityDegrees","FavoriteList","favorites","map","idx","Favorites","push","history","DayPreview","day","date","moment","Date","utc","format","Day","getDay","Maximum","FiveDayList","Homepage","cityName","setcityName","isFavorite","setIsFavorite","navigator","geolocation","getCurrentPosition","success","position","coords","latitude","longitude","some","onSubmit","ev","preventDefault","onChange","target","value","placeholder","getState","favCity","DailyForecasts","AppFooter","href","src","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b58833bc.chunk.js","sourcesContent":["export const storageService = {\r\n    saveToStorage,\r\n    loadFromStorage\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val));\r\n  }\r\n  \r\n  function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key);\r\n    return JSON.parse(val);\r\n  }","import axios from 'axios';\r\nimport { storageService } from './storageService';\r\n\r\nexport const weatherService = {\r\n  getWeatherNow,\r\n  fiveDayForecast,\r\n  getCityCode,\r\n  getCityCodeByPos\r\n}\r\nconst HOME_KEY = 'tel-aviv';\r\nconst FIVE_KEY = '5 day tel-aviv'\r\n\r\nfunction getWeatherNow(name) {\r\n\r\n  return getCityCode(name)\r\n    .then(cities => {\r\n      if(!cities.length) return \r\n      return cities[0].Key\r\n    })\r\n    .then(res => {\r\n      const url = `http://dataservice.accuweather.com/forecasts/v1/hourly/1hour/${res}?apikey=q2991AeoNGqDqjczrkRdqwAllJ0tLVfs&details=true&metric=true`\r\n      return axios.get(url)\r\n        .then(res => {\r\n          storageService.saveToStorage(HOME_KEY, res.data);\r\n          return res.data\r\n        })\r\n    })\r\n\r\n}\r\n\r\nfunction fiveDayForecast(city) {\r\n  const key = city ? city.Key : '215854' \r\n  const url = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${key}?apikey=q2991AeoNGqDqjczrkRdqwAllJ0tLVfs&details=true&metric=true`\r\n  return axios.get(url)\r\n    .then(res => {\r\n      storageService.saveToStorage(FIVE_KEY, res.data);\r\n      return res.data\r\n    })\r\n}\r\n\r\nfunction getCityCode(name) {\r\n  const queryName = typeof name === 'string' ? name : name.EnglishName\r\n  const url = `http://dataservice.accuweather.com/locations/v1/cities/search?apikey=q2991AeoNGqDqjczrkRdqwAllJ0tLVfs&q=${queryName}&language=en-us&details=true&offset=1`\r\n  return axios.get(url)\r\n    .then(res => res.data)\r\n\r\n}\r\n\r\nfunction getCityCodeByPos(lat, lang) {\r\n  const url = `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=q2991AeoNGqDqjczrkRdqwAllJ0tLVfs&q=${lat}%2C${lang}&details=true`\r\n  return axios.get(url)\r\n    .then(res => res.data)\r\n\r\n}","import swal from 'sweetalert'\r\nimport { weatherService } from '../../services/weatherService'\r\n\r\nexport function loadByGeoPos(lat, lang) {\r\n    return async dispatch => {  \r\n        const currCity = await weatherService.getCityCodeByPos(lat, lang)\r\n        const currCityWeather = await weatherService.getWeatherNow(currCity.EnglishName)\r\n        dispatch({ type: 'SET_CITY_BY_POS', currCity})\r\n        dispatch({ type: 'SET_CITY_WEATHER', currCityWeather })\r\n\r\n    }\r\n}\r\n\r\nexport function loadCity(name = 'tel-aviv') {\r\n    return async dispatch => {\r\n        const currCity = await weatherService.getCityCode(name)\r\n        try {\r\n\r\n            const currCityWeather = await weatherService.getWeatherNow(name)\r\n            dispatch({ type: 'SET_CITY', currCity })\r\n            dispatch({ type: 'SET_CITY_WEATHER', currCityWeather })\r\n        }\r\n        catch {\r\n            return swal('Sorry', 'Couldn\\'t find a city that matches your search','error', {\r\n                button: 'Try Again'\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function setFiveDayForecast(city) {\r\n    return async dispatch => {\r\n        const forecast = await weatherService.fiveDayForecast(city)\r\n        dispatch({ type: 'SET_FIVE', forecast })\r\n    }\r\n}\r\n\r\nexport function handleFavorites(location) {\r\n    return async (dispatch, getState) => {\r\n        const [cityWeather] = await weatherService.getWeatherNow(location.LocalizedName)\r\n        const { favorites } = getState().weatherModule\r\n        const city = {\r\n            location,\r\n            cityWeather\r\n        }\r\n        const isFavorite = favorites.some(favCity => favCity.location.Key === city.location.Key)\r\n        isFavorite ? dispatch({ type: 'REMOVE_CITY', city }) : dispatch({ type: 'ADD_CITY', city })\r\n    }\r\n}\r\n\r\nexport function toggleScale() {\r\n    return dispatch => {\r\n        dispatch({type:'TOGGLE_SCALE'})\r\n    }\r\n}\r\n\r\nexport function toggleDarkMode() {\r\n    return dispatch => {\r\n        dispatch({type:'TOGGLE_DARK'})\r\n    }\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { toggleDarkMode, toggleScale } from '../store/actions/weatherActions'\r\n\r\nexport default function AppHeader() {\r\n\r\n    const { isCelsius, isDarkMode } = useSelector(state => state.weatherModule)\r\n    const dispatch = useDispatch()\r\n\r\n    const toggleCelsius = () => {\r\n        dispatch(toggleScale())\r\n    }\r\n\r\n    const toggleDark = () => {\r\n        dispatch(toggleDarkMode())\r\n    }\r\n\r\n    return (\r\n        <div className={isDarkMode ? 'header-dark' : 'header-light'}>\r\n            <h2>Herolo <span> weather task </span> </h2>\r\n            <div className=\"nav-bar\">\r\n                <NavLink exact to=\"/\" >Home</NavLink>\r\n                <NavLink to=\"/favorites\" >Favorites</NavLink>\r\n                <div className='toggle-btns'>\r\n                <button onClick={toggleCelsius}>{isCelsius ? 'C°' : 'F°'}</button>\r\n                <button onClick={toggleDark}>{isDarkMode ? '☾' : '🌞︎'}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useSelector } from \"react-redux\"\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport function FavoritePreview({ city, setCity }) {\r\n\r\n    const { isCelsius } = useSelector(state => state.weatherModule)\r\n    const [bgImage, setBgImage] = useState(null)\r\n    const cityDegrees = () => {\r\n        const temp = Temperature.Value\r\n        return isCelsius ? Math.round(temp) : Math.round(temp * 1.8 + 32)\r\n    }\r\n\r\n    const onSetCity = () => {\r\n        setCity(city)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (city.cityWeather.IconPhrase === 'Sunny') setBgImage(1)\r\n        else if (city.cityWeather.IconPhrase === 'Thunder storms') setBgImage(2)\r\n        else if (city.cityWeather.IconPhrase === 'Snow') setBgImage(3)\r\n        else if (city.cityWeather.IconPhrase === 'Mostly sunny') setBgImage(4)\r\n        else if (city.cityWeather.IconPhrase === 'Partly cloudy' || 'Partly sunny') setBgImage(5)\r\n        else if (city.cityWeather.IconPhrase === 'Flurries' || 'Cloudy' || 'Mostly cloudy' || 'Intermittent clouds') setBgImage(6)\r\n        else if (city.cityWeather.IconPhrase === 'Showers' || 'Rain' || 'Partly sunny w/ showers') setBgImage(7)\r\n    }, [])\r\n\r\n    const { location, cityWeather: { IconPhrase, Temperature } } = city\r\n\r\n        if (!bgImage) return <h1>Loading...</h1>\r\n    return (\r\n        <div className=\"favorite-card\" onClick={onSetCity} style={{ backgroundImage: `url(/imgs/${bgImage}.png)` }}>\r\n            <h2>{location.LocalizedName}</h2>\r\n            <h2>{IconPhrase}</h2>\r\n            <h2>{cityDegrees()}°</h2>\r\n        </div>\r\n    )\r\n}","import { FavoritePreview } from \"./FavoritePreview\";\r\n\r\n    export function FavoriteList({favorites, setCity}) {\r\n        return (\r\n            <div className=\"favorites-list\">\r\n                {favorites.map((city,idx) => (\r\n                    <FavoritePreview city={city} setCity={setCity}  key={idx}/>\r\n                ))}\r\n            </div>\r\n        )\r\n    }","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useSelector } from 'react-redux'\r\nimport { FavoriteList } from '../cmps/FavoriteList'\r\nimport { loadCity } from '../store/actions/weatherActions'\r\nimport swal from 'sweetalert'\r\n\r\nexport const Favorites = ({ history: { push } }) => {\r\n\r\n    const { favorites } = useSelector(state => state.weatherModule)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSetCity = (city) => {\r\n        dispatch(loadCity(city.location.EnglishName))\r\n        push('/')\r\n    }\r\n\r\n    if (!favorites.length) swal('Sorry', 'No cities saved to Favorites yet', 'error', {\r\n        button: 'Go back'\r\n    })\r\n    .then(function() {\r\n        push('/')\r\n    })\r\nreturn (\r\n    <FavoriteList favorites={favorites} setCity={onSetCity} />\r\n)\r\n}\r\n","import moment from \"moment\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\n\r\nexport function DayPreview({ day }) {\r\n\r\n    const { isCelsius } = useSelector(state => state.weatherModule)\r\n\r\n    const weekdays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']\r\n    const date = moment(day.Date).utc().format('MM/DD/YYYY')\r\n    const [bgImage, setBgImage] = useState(null)\r\n\r\n    const cityDegrees = () => {\r\n        const temp = day.Temperature.Maximum.Value\r\n        return isCelsius ? Math.round(temp) : Math.round(temp * 1.8 + 32)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (day.Day.IconPhrase === 'Sunny') setBgImage(1)\r\n        else if (day.Day.IconPhrase === 'Thunder storms') setBgImage(2)\r\n        else if (day.Day.IconPhrase === 'Snow') setBgImage(3)\r\n        else if (day.Day.IconPhrase === 'Mostly sunny') setBgImage(4)\r\n        else if (day.Day.IconPhrase === 'Partly cloudy' || 'Partly sunny') setBgImage(5)\r\n        else if (day.Day.IconPhrase === 'Flurries' || 'Cloudy' || 'Mostly cloudy' || 'Intermittent clouds') setBgImage(6)\r\n        else if (day.Day.IconPhrase === 'Showers' || 'Rain' || 'Partly sunny w/ showers') setBgImage(7)\r\n    }, [])\r\n    if (!bgImage) return <h1>Loading...</h1>\r\n    return (\r\n        <div className=\"day-card\" style={{ backgroundImage: `url(/imgs/${bgImage}.png)` }}>\r\n            <h2>{date}</h2>\r\n            <h2>{weekdays[new Date(date).getDay()]}</h2>\r\n            <h2>{cityDegrees()}°</h2>\r\n        </div>\r\n    )\r\n}","import { DayPreview } from './DayPreview'\r\n\r\nexport function FiveDayList({ forecast }) {\r\n    return (\r\n        <div className=\"forecast-list\">\r\n            {forecast?.map(day => (\r\n                <DayPreview day={day} key={day.Date} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport swal from 'sweetalert'\r\nimport { FiveDayList } from '../cmps/FiveDaysList'\r\nimport { handleFavorites, loadByGeoPos, loadCity, setFiveDayForecast } from '../store/actions/weatherActions'\r\n\r\nexport const Homepage = () => {\r\n    const { fiveDayForecast, currCityWeather, currCity, favorites, isCelsius, isDarkMode } = useSelector(state => state.weatherModule)\r\n    const dispatch = useDispatch()\r\n    const [cityName, setcityName] = useState()\r\n    let [isFavorite, setIsFavorite] = useState()\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(success)\r\n        // eslint-disable-next-line\r\n    }, [])\r\n    \r\n    const  success = (position) => {\r\n        if (!currCity) dispatch(loadCity(cityName))\r\n        if(!currCityWeather)dispatch(loadByGeoPos(position.coords.latitude, position.coords.longitude))\r\n        dispatch(setFiveDayForecast(currCity))\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setIsFavorite(favorites.some(city => city.location.Key === currCity.Key))\r\n        dispatch(setFiveDayForecast(currCity))\r\n    }, [favorites, currCity])\r\n    \r\n    const handleChange = (ev) => {\r\n        setcityName(ev.target.value)\r\n    }\r\n    \r\n    const handleSubmit = (ev) => {\r\n        ev.preventDefault()\r\n        dispatch(loadCity(cityName))\r\n    }\r\n    \r\n    const addToFavorites = () => {\r\n        if (!currCity) return\r\n        isFavorite ? swal('City removed from your favorites.','') : swal('City saved to Favorites.','')\r\n        dispatch(handleFavorites(currCity))\r\n    }\r\n\r\n    const cityDegrees = () => {\r\n        const temp = currCityWeather[0].Temperature.Value\r\n        return isCelsius ? Math.round(temp) : Math.round(temp * 1.8 + 32)\r\n    }\r\n\r\n\r\n    if (!currCityWeather) return <h1>Loading...</h1>\r\n\r\n    return (\r\n        <div className={isDarkMode ? 'homepage-dark' : 'homepage-light'}>\r\n            <form onSubmit={handleSubmit}>\r\n                <input className=\"search-bar\" type=\"text\" onChange={handleChange} placeholder=\"Search cities\" value={cityName} />\r\n                <button className=\"search-btn\">Search</button>\r\n            </form>\r\n            <div className=\"home-top\">\r\n                <div>\r\n                    <h2>\r\n                        {currCity.LocalizedName}\r\n                    </h2>\r\n                    <h2>\r\n                        {cityDegrees()}°\r\n                    </h2>\r\n                </div>\r\n                <button className=\"fav-btn\" onClick={addToFavorites}>{isFavorite ? 'Remove From Favorites' : 'Add To Favorites'}</button>\r\n            </div>\r\n            <h1>{currCityWeather[0].IconPhrase}</h1>\r\n            <FiveDayList forecast={fiveDayForecast.DailyForecasts} />\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nexport default function AppFooter() {\r\n\r\n    const { isDarkMode } = useSelector(state => state.weatherModule)\r\n\r\n    return (\r\n        <div className= {isDarkMode ? 'footer-dark' : 'footer-light'}>\r\n            <h3>© 2021 Omer Liv</h3>\r\n            <a href=\"https://www.linkedin.com/in/omer-liv-7941a4213/\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/LinkedIn_logo_initials.png/600px-LinkedIn_logo_initials.png\" /></a>\r\n        </div>\r\n    )\r\n}","import './App.scss';\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\nimport AppHeader from './cmps/AppHeader';\nimport { Favorites } from './pages/Favorites';\nimport { Homepage } from './pages/Homepage';\nimport AppFooter from './cmps/AppFooter';\nimport { useSelector } from 'react-redux';\n\nfunction App() {\n\n  const { isDarkMode } = useSelector(state => state.weatherModule)\n\n  return (\n    <div className={isDarkMode ? 'dark' : 'light'}>\n      <div className=\"content-wrap\">\n\n        <Router>\n          <AppHeader />\n          <Switch>\n            <Route path=\"/favorites\" component={Favorites} />\n            <Route path=\"/\" component={Homepage} />\n          </Switch>\n          <AppFooter />\n        </Router >\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const INITIAL_STATE = {\r\n    currCity: null,\r\n    currCityWeather: null,\r\n    favorites: [],\r\n    fiveDayForecast: [],\r\n    isCelsius: true,\r\n    isDarkMode: false\r\n}\r\n\r\nexport function weatherReducer(state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n        case 'SET_CITY':\r\n            return {\r\n                ...state,\r\n                currCity: action.currCity[0]\r\n            }\r\n        case 'SET_CITY_BY_POS':\r\n            return {\r\n                ...state,\r\n                currCity: action.currCity\r\n            }\r\n        case 'SET_CITY_WEATHER':\r\n            return {\r\n                ...state,\r\n                currCityWeather: action.currCityWeather\r\n            }\r\n        case 'SET_FIVE':\r\n            return {\r\n                ...state,\r\n                fiveDayForecast: action.forecast\r\n            }\r\n        case 'ADD_CITY':\r\n            return {\r\n                ...state,\r\n                favorites: [...state.favorites, action.city]\r\n            }\r\n        case 'REMOVE_CITY':\r\n            return {\r\n                ...state,\r\n                favorites: state.favorites.filter(city => city.location.Key !== action.city.location.Key)\r\n            }\r\n        case 'TOGGLE_SCALE':\r\n            return {\r\n                ...state,\r\n                isCelsius: !state.isCelsius\r\n            }\r\n        case 'TOGGLE_DARK':\r\n            return {\r\n                ...state,\r\n                isDarkMode: !state.isDarkMode\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { weatherReducer } from './reducers/weatherReducer';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst rootReducer = combineReducers({\r\n    weatherModule: weatherReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/global.scss';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}